#!/usr/bin/env python3

"""hri_fullbody detection: multipeople 3D pose estimation
   from RGB images. Part of ROS4HRI. 

   Inputs:
   - /humans/bodies/tracked as hri_msgs/IdsList.msg
   - /humans/bodies/<body_id>/roi as sensor_msgs/RegionOfInterest.msg
   - /humans/bodies/<body_id>/crop as sensor_msgs/Image.msg
   - /camera/depth/image_rect as sensor_msgs/Image.msg

   Outputs:
   - /human_<body_id>/jointstate as ...
   - /human/faces/tracked as hri_msgs/IdsList
   - /human/faces/<face_id>/roi as sensor_msgs/RegionOfInterest.msg
   - /human/faces/<face_id>/crop as sensor_msgs/Image.msg"""

import cv2
import rospy
import rosparam
from sensor_msgs.msg import Image, RegionOfInterest
from cv_bridge import CvBridge
import copy
import numpy as np
from hri_fullbody.fullbody_detector import FullbodyDetector
import uuid
from hri_msgs.msg import IdsList


def generate_id():
    return str(uuid.uuid4())[:5]  # for a 5 char long ID


# Parameter [human_description_ebe80] does not exist, and was not found by searchParam()


class MultibodyManager:
    def __init__(self, use_depth, visual_debug, textual_debug, stickman_debug, max_age):

        self.use_depth = use_depth
        self.visual_debug = visual_debug
        self.textual_debug = textual_debug
        self.stickman_debug = stickman_debug
        self.max_age = max_age

        # Dictionary for the detected people
        self.detected_bodies = {}
        # id = uni
        # self.detected_bodies[id][0] = personal id

        # Subscriber for the list of detected bodies
        self.bodies_list_sub = rospy.Subscriber(
            "/humans/bodies/tracked", IdsList, self.ids_list_cb, queue_size=1
        )

    def ids_list_cb(self, msg):

        current_bodies = {}

        for id in msg.ids:
            if id in self.detected_bodies:
                current_bodies[id] = (self.detected_bodies[id][0], 0)
            else:
                current_bodies[id] = (
                    FullbodyDetector(
                        self.use_depth,
                        self.visual_debug,
                        self.textual_debug,
                        self.stickman_debug,
                        id,
                    ),
                    0,
                )

        for id in self.detected_bodies:
            if not id in current_bodies:
                self.detected_bodies[id][0].unregister()

        self.detected_bodies = current_bodies


if __name__ == "__main__":

    rospy.init_node("multibody_manager", anonymous=True)

    use_depth = rospy.get_param("~use_depth", False)
    visual_debug = rospy.get_param("~visual_debug", False)
    textual_debug = rospy.get_param("~textual_debug", False)
    stickman_debug = rospy.get_param("~stickman_debug", False)
    max_age = 30

    manager = MultibodyManager(
        use_depth, visual_debug, textual_debug, stickman_debug, max_age
    )
    rospy.spin()
