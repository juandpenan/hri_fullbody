#!/usr/bin/env python3

"""hri_fullbody detection: multipeople 3D pose estimation
   from RGB images. Part of ROS4HRI. 

   Inputs:
   - /humans/bodies/tracked as hri_msgs/IdsList.msg
   - /humans/bodies/<body_id>/roi as sensor_msgs/RegionOfInterest.msg
   - /humans/bodies/<body_id>/crop as sensor_msgs/Image.msg
   - /camera/depth/image_rect as sensor_msgs/Image.msg

   Outputs:
   - /human_<body_id>/jointstate as ...
   - /human/faces/tracked as hri_msgs/IdsList
   - /human/faces/<face_id>/roi as sensor_msgs/RegionOfInterest.msg
   - /human/faces/<face_id>/crop as sensor_msgs/Image.msg"""

import cv2
import rospy
import rosparam
from sensor_msgs.msg import Image, RegionOfInterest
from cv_bridge import CvBridge
import copy
import numpy as np
from hri_fullbody.fullbody_detector import FullbodyDetector
import uuid
import re
from hri_msgs.msg import IdsList


def generate_id():
    return str(uuid.uuid4())[:5]  # for a 5 char long ID

# Parameter [human_description_ebe80] does not exist, and was not found by searchParam()


class MultibodyManager:
    
    def __init__(
        self, 
        use_depth, 
        textual_debug, 
        stickman_debug):

        self.use_depth = use_depth
        self.textual_debug = textual_debug
        self.stickman_debug = stickman_debug

        # Dictionary for the detected people
        self.detected_bodies = {}
        # id = uni
        # self.detected_bodies[id][0] = personal id

        # Subscriber for the list of detected bodies
        self.bodies_list_sub = rospy.Subscriber(
            "/humans/bodies/tracked", IdsList, self.ids_list_cb, queue_size=1
        )

    def ids_list_cb(self, msg):

        current_bodies = {}

        for id in msg.ids:
            if id in self.detected_bodies:
                current_bodies[id] = (self.detected_bodies[id][0], 0)
            else:
                current_bodies[id] = (
                    FullbodyDetector(
                        self.use_depth,
                        self.textual_debug,
                        self.stickman_debug,
                        id,
                    ),
                    0
                )
                rospy.loginfo("Generated single person detector for body_%s", id)
                rospy.loginfo("Waiting for frames on topic %s", \
                    current_bodies[id][0].get_image_topic())

        for id in self.detected_bodies:
            if not id in current_bodies:
                self.detected_bodies[id][0].unregister()

        self.detected_bodies = current_bodies



if __name__ == "__main__":

    rospy.init_node("fullbody_manager", anonymous=True)

    use_depth = rospy.get_param("~use_depth", False)
    textual_debug = rospy.get_param("~textual_debug", False)
    stickman_debug = rospy.get_param("~stickman_debug", False)
    single_body = rospy.get_param("~single_body", False)
    manager = None
    regex = "^([e|E]\d{4}|\d[e|E]\d{3}|\d{2}[e|E]\d{2}|\d{3}[e|E]\d|\d{4}[e|E]|\d{5})$"

    rospy.loginfo("Using depth camera for body position estimation: %s", \
     str(use_depth))
    if single_body:
        rospy.loginfo("Setting up for single body pose estimation")
    else:
        rospy.loginfo("Setting up for multibody pose estimation")

    if not single_body:
        manager = MultibodyManager(
            use_depth, 
            textual_debug, 
            stickman_debug)
        rospy.loginfo("Waiting for ids on /humans/bodies/tracked")
    else:
        id = generate_id()
        regex_matching = re.search(regex, id)
        while regex_matching:
            id = generate_id()
            regex_matching = re.search(regex, id)
        current_body = FullbodyDetector(
            use_depth,
            textual_debug,
            stickman_debug,
            id,
            single_body)
        rospy.loginfo("Generated single person detector for body_%s", id)
        rospy.loginfo("Waiting for frames on topic %s", \
            current_body.get_image_topic())

    rospy.spin()
